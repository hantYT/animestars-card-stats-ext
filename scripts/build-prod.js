const fs = require('fs');
const path = require('path');
const archiver = require('archiver');
const { execSync } = require('child_process');

// –ß–∏—Ç–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ package.json
const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));
const version = packageJson.version;
const name = packageJson.name;

console.log('üîß –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω —Å–±–æ—Ä–∫—É...');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
process.env.NODE_ENV = 'production';

try {
  // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É dist –∏ —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
  execSync('npm run clean', { stdio: 'inherit' });
  execSync('webpack --mode=production', { stdio: 'inherit' });
  
  console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  
  // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
  const distPath = path.join(__dirname, '..', 'dist');
  const archiveName = `${name}-v${version}.zip`;
  const archivePath = path.join(__dirname, '..', archiveName);
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (fs.existsSync(archivePath)) {
    fs.unlinkSync(archivePath);
  }
  
  console.log(`üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤: ${archiveName}`);
  
  const output = fs.createWriteStream(archivePath);
  const archive = archiver('zip', {
    zlib: { level: 9 } // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
  });
  
  output.on('close', function() {
    const size = (archive.pointer() / 1024 / 1024).toFixed(2);
    console.log(`‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ${archiveName} (${size} MB)`);
    console.log(`üìÅ –§–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ: ${archive.pointer()} –±–∞–π—Ç`);
    console.log('üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!');
  });
  
  archive.on('error', function(err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞:', err);
    throw err;
  });
  
  archive.pipe(output);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist –≤ –∞—Ä—Ö–∏–≤
  archive.directory(distPath, false);
  
  // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤
  archive.finalize();
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error.message);
  process.exit(1);
}