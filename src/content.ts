import { GitHubService } from './github';
import { CardElement, CardSelector } from './types';
import './content.css';

class CardStatsOverlay {
  private githubService: GitHubService;
  private isInitialized = false;

  // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç –Ω–∞ —Å–∞–π—Ç–µ
  private cardSelectors: CardSelector[] = [
    {
      selector: '.anime-cards__item-wrapper',
      dataIdAttribute: 'data-id',
      dataNameAttribute: 'data-name',
      insertionMethod: 'append',
      targetSelector: '.anime-cards__item-wrapper'
    },
    {
      selector: '.trade__inventory-item',
      dataIdAttribute: 'data-card-id',
      insertionMethod: 'append'
    },
    {
      selector: '.trade__main-item',
      dataIdAttribute: 'href',
      insertionMethod: 'append'
    },
    {
      selector: '.trade__item', // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤
      dataIdAttribute: 'data-card-id',
      insertionMethod: 'append'
    },
    {
      selector: '.trade-card', // –ï—â–µ –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
      dataIdAttribute: 'data-id',
      insertionMethod: 'append'
    },
    {
      selector: '.inventory-card', // –î–ª—è –∫–∞—Ä—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      dataIdAttribute: 'data-card-id',
      insertionMethod: 'append'
    },
    {
      selector: '.history__body-item',
      dataIdAttribute: 'href',
      insertionMethod: 'append'
    }
  ];

  constructor() {
    this.githubService = new GitHubService();
  }

  async init(): Promise<void> {
    if (this.isInitialized) return;

    try {
      console.log('üöÄ Initializing AnimestarsCards Stats Extension...');
      
      // –ù–µ –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º background
      console.log('‚úÖ Using background database service');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ —á–µ—Ä–µ–∑ background
      const cardsResponse = await chrome.runtime.sendMessage({ type: 'getCardsCount' });
      const cardsCount = cardsResponse.success ? cardsResponse.data : 0;
      
      if (cardsCount === 0) {
        console.log('üì• No data yet, background is loading. Extension will work when data is ready.');
      } else {
        console.log(`üìä Database ready with ${cardsCount} cards`);
      }

      this.isInitialized = true;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pageType = this.getPageType();
      console.log(`‚úÖ Extension initialized successfully on ${pageType} page`);

      // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç background
      this.setupMessageListener();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
      this.startDOMObserver();
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç—ã
      this.processExistingCards();

    } catch (error) {
      console.error('‚ùå Error initializing extension:', error);
    }
  }

  private setupMessageListener(): void {
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
      if (message.type === 'databaseUpdated') {
        console.log(`üîÑ Database updated: ${message.data.cardsCount} cards`);
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        this.processExistingCards();
      }
    });
  }

  private async checkAndUpdateDatabase(): Promise<void> {
    // Content script –±–æ–ª—å—à–µ –ù–ï –∂–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!
    // –û–Ω –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–º —á—Ç–æ –µ—Å—Ç—å, –∞ background –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    console.log('üîç Content script no longer waits for database, background handles it');
  }

  private startDOMObserver(): void {
    const observer = new MutationObserver((mutations) => {
      let shouldProcess = false;
      let isTradePageUpdate = false;

      mutations.forEach((mutation) => {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
          Array.from(mutation.addedNodes).forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const element = node as Element;
              
              // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Ç—Ä–µ–π–¥–æ–≤
              if (this.isTradePageContainer(element)) {
                isTradePageUpdate = true;
                shouldProcess = true;
              } else if (this.isCardElement(element)) {
                shouldProcess = true;
              }
            }
          });
        }
        
        // –¢–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (mutation.type === 'attributes' && mutation.target) {
          const element = mutation.target as Element;
          if (this.isTradeRelatedElement(element, mutation.attributeName)) {
            isTradePageUpdate = true;
            shouldProcess = true;
          }
        }
      });

      if (shouldProcess) {
        const delay = isTradePageUpdate ? 300 : 100; // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç—Ä–µ–π–¥-—Å—Ç—Ä–∞–Ω–∏—Ü
        setTimeout(() => this.processExistingCards(), delay);
      }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ observer —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–π–¥-—Å—Ç—Ä–∞–Ω–∏—Ü
    const observerConfig = {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['class', 'data-loaded', 'data-updated', 'style'] // –ê—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ AJAX –∑–∞–≥—Ä—É–∑–∫–µ
    };

    observer.observe(document.body, observerConfig);
    console.log('üëÄ DOM observer started with trade page support');
  }

  private isCardElement(element: Element): boolean {
    return this.cardSelectors.some(selector => 
      element.matches(selector.selector) || element.querySelector(selector.selector)
    );
  }

  private isTradePageContainer(element: Element): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –¥–ª—è —Ç—Ä–µ–π–¥-–∫–∞—Ä—Ç
    const tradeContainerSelectors = [
      '.trade__inventory',
      '.trade__main',
      '.trade__offers',
      '.trade__cards-list',
      '.trade-section',
      '[class*="trade"]',
      '[id*="trade"]'
    ];

    return tradeContainerSelectors.some(selector => 
      element.matches(selector) || element.querySelector(selector)
    );
  }

  private isTradeRelatedElement(element: Element, attributeName: string | null): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ —Å —Ç—Ä–µ–π–¥-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    if (!attributeName) return false;

    const tradeRelatedClasses = ['trade', 'card', 'inventory', 'loaded', 'updated'];
    const tradeRelatedAttributes = ['class', 'data-loaded', 'data-updated', 'style'];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const isTradePageUrl = window.location.pathname.includes('/trade/');
    
    if (!isTradePageUrl) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    if (tradeRelatedAttributes.includes(attributeName)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ç—Ä–µ–π–¥-—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–ª–∏ –∫–∞—Ä—Ç—ã
      const elementText = element.className + ' ' + element.tagName;
      return tradeRelatedClasses.some(keyword => 
        elementText.toLowerCase().includes(keyword.toLowerCase())
      ) || this.isCardElement(element);
    }

    return false;
  }

  private getPageType(): string {
    const path = window.location.pathname;
    
    if (path.includes('/trade/')) {
      return 'trade';
    } else if (path.includes('/cards/')) {
      return 'cards catalog';
    } else if (path.includes('/history/')) {
      return 'history';
    } else if (path.includes('/inventory/')) {
      return 'inventory';
    } else {
      return 'general';
    }
  }

  private async processExistingCards(): Promise<void> {
    if (!this.isInitialized) return;

    const isTradePageUrl = window.location.pathname.includes('/trade/');
    
    if (isTradePageUrl) {
      console.log('üîÑ Processing cards on trade page...');
    }

    const allCards = this.findAllCards();
    console.log(`üé¥ Found ${allCards.length} cards to process`);

    if (isTradePageUrl && allCards.length > 0) {
      console.log('üìä Trade page cards breakdown:');
      const cardsBySelector: { [key: string]: number } = {};
      
      this.cardSelectors.forEach(selector => {
        const elements = document.querySelectorAll(selector.selector);
        if (elements.length > 0) {
          cardsBySelector[selector.selector] = elements.length;
        }
      });
      
      console.table(cardsBySelector);
    }

    for (const card of allCards) {
      await this.addStatsOverlay(card);
    }
  }

  private findAllCards(): CardElement[] {
    const cards: CardElement[] = [];

    this.cardSelectors.forEach(selector => {
      const elements = document.querySelectorAll(selector.selector);
      
      elements.forEach(element => {
        const cardId = this.extractCardId(element as HTMLElement, selector);
        const cardName = this.extractCardName(element as HTMLElement, selector);
        
        if (cardId) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–≤–µ—Ä–ª–µ–π –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
          if (!element.querySelector('.card-stats-overlay')) {
            cards.push({
              element: element as HTMLElement,
              cardId,
              cardName
            });
          }
        }
      });
    });

    return cards;
  }

  private extractCardId(element: HTMLElement, selector: CardSelector): number | null {
    const attr = selector.dataIdAttribute;
    
    if (attr === 'href') {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ href —Ç–∏–ø–∞ "/cards/users/?id=12345"
      const href = element.getAttribute('href');
      if (href) {
        const match = href.match(/id=(\d+)/);
        return match ? parseInt(match[1], 10) : null;
      }
    } else {
      // –î–ª—è anime-cards__item-wrapper –∏—â–µ–º data-id –≤ –¥–æ—á–µ—Ä–Ω–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ
      let targetElement = element;
      if (element.classList.contains('anime-cards__item-wrapper')) {
        const cardItem = element.querySelector('.anime-cards__item');
        if (cardItem) {
          targetElement = cardItem as HTMLElement;
        }
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
      const value = targetElement.getAttribute(attr);
      return value ? parseInt(value, 10) : null;
    }
    
    return null;
  }

  private extractCardName(element: HTMLElement, selector: CardSelector): string | undefined {
    if (selector.dataNameAttribute) {
      // –î–ª—è anime-cards__item-wrapper –∏—â–µ–º data-name –≤ –¥–æ—á–µ—Ä–Ω–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ
      let targetElement = element;
      if (element.classList.contains('anime-cards__item-wrapper')) {
        const cardItem = element.querySelector('.anime-cards__item');
        if (cardItem) {
          targetElement = cardItem as HTMLElement;
        }
      }
      
      return targetElement.getAttribute(selector.dataNameAttribute) || undefined;
    }
    return undefined;
  }

  private async addStatsOverlay(card: CardElement): Promise<void> {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ background script
      const response = await chrome.runtime.sendMessage({
        type: 'getCardStats',
        data: { cardId: card.cardId }
      });
      
      if (!response.success || !response.data) {
        console.log(`üì≠ No stats found for card ${card.cardId}`);
        return;
      }
      
      const stats = response.data;

      const overlay = this.createStatsOverlay(stats, card.cardId, card.cardName);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      const matchingSelector = this.cardSelectors.find(selector => 
        card.element.matches(selector.selector)
      );

      if (matchingSelector) {
        this.insertOverlay(card.element, overlay, matchingSelector);
      }

    } catch (error) {
      console.error(`‚ùå Error adding overlay for card ${card.cardId}:`, error);
    }
  }

  private createStatsOverlay(stats: { users: number; need: number; trade: number }, cardId: number, cardName?: string): HTMLElement {
    const overlay = document.createElement('div');
    overlay.className = 'card-stats-overlay';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const isHighUsers = stats.users >= 50;
    const isHighNeed = stats.need >= 30;
    const isHighTrade = stats.trade >= 10;
    
    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
    const totalDigits = String(stats.users).length + String(stats.need).length + String(stats.trade).length;
    const maxValue = Math.max(stats.users, stats.need, stats.trade);
    
    overlay.innerHTML = `
      <div class="card-stats">
        <span class="card-stat-item" data-type="users" data-card-id="${cardId}" title="–í–ª–∞–¥–µ–ª—å—Ü–µ–≤" ${isHighUsers ? 'data-high-value="true"' : ''}><i class="fas fa-users"></i> ${stats.users || 0}</span>
        <span class="card-stat-item" data-type="need" data-card-id="${cardId}" title="–•–æ—Ç—è—Ç –ø–æ–ª—É—á–∏—Ç—å" ${isHighNeed ? 'data-high-value="true"' : ''}><i class="fas fa-heart"></i> ${stats.need || 0}</span>
        <span class="card-stat-item" data-type="trade" data-card-id="${cardId}" title="–ì–æ—Ç–æ–≤—ã –æ–±–º–µ–Ω—è—Ç—å" ${isHighTrade ? 'data-high-value="true"' : ''}><i class="fas fa-sync-alt"></i> ${stats.trade || 0}</span>
      </div>
    `;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    this.applyAdaptiveStyles(overlay, totalDigits, maxValue);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞
    this.addClickHandlers(overlay, cardId);

    return overlay;
  }

  private applyAdaptiveStyles(overlay: HTMLElement, totalDigits: number, maxValue: number): void {
    const statsContainer = overlay.querySelector('.card-stats') as HTMLElement;
    if (!statsContainer) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    let sizeClass = 'card-stats--medium'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let gap = 5; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (totalDigits <= 6 && maxValue < 100) {
      // –ú–∞–ª–µ–Ω—å–∫–∏–µ —á–∏—Å–ª–∞ - –±–æ–ª—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
      sizeClass = 'card-stats--large';
      gap = 8;
    } else if (totalDigits <= 9 && maxValue < 1000) {
      // –°—Ä–µ–¥–Ω–∏–µ —á–∏—Å–ª–∞ - —Å—Ä–µ–¥–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
      sizeClass = 'card-stats--medium';
      gap = 5;
    } else if (totalDigits <= 12 && maxValue < 10000) {
      // –ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ - –º–∞–ª–µ–Ω—å–∫–∏–µ –æ—Ç—Å—Ç—É–ø—ã
      sizeClass = 'card-stats--small';
      gap = 3;
    } else {
      // –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
      sizeClass = 'card-stats--compact';
      gap = 2;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (maxValue >= 1000) {
      // –î–ª—è 4-–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª —É–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø
      gap = Math.max(gap - 1, 2);
    }
    
    if (maxValue >= 10000) {
      // –î–ª—è 5+ –∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª –¥–µ–ª–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
      gap = 2;
    }

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø 2 –ø–∏–∫—Å–µ–ª—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π 10
    gap = Math.max(2, Math.min(gap, 10));

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å —Ä–∞–∑–º–µ—Ä–∞
    statsContainer.className = `card-stats ${sizeClass}`;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
    statsContainer.style.setProperty('--stats-gap', `${gap}px`);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
    if (maxValue >= 10000) {
      // –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –µ—â–µ –±–æ–ª—å—à–µ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
      const dynamicGap = Math.max(2, 6 - Math.floor(String(maxValue).length / 2));
      statsContainer.style.setProperty('--stats-gap', `${dynamicGap}px`);
      
      // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
      if (maxValue >= 100000) {
        statsContainer.style.setProperty('--stats-font-size', '7px');
      }
    }
  }

  private addClickHandlers(overlay: HTMLElement, cardId: number): void {
    const statItems = overlay.querySelectorAll('.card-stat-item');
    
    statItems.forEach((item) => {
      const element = item as HTMLElement;
      const type = element.getAttribute('data-type');
      
      element.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        
        let url = '';
        switch(type) {
          case 'users':
            url = `/cards/users/?id=${cardId}`;
            break;
          case 'need':
            url = `/cards/users/need/?id=${cardId}`;
            break;
          case 'trade':
            url = `/cards/users/trade/?id=${cardId}`;
            break;
          default:
            return;
        }
        
        console.log(`üîó Navigating to: ${url}`);
        window.open(url, '_blank');
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
      element.style.cursor = 'pointer';
    });
  }

  private insertOverlay(cardElement: HTMLElement, overlay: HTMLElement, selector: CardSelector): void {
    const targetElement = selector.targetSelector 
      ? cardElement.querySelector(selector.targetSelector) || cardElement
      : cardElement;

    switch (selector.insertionMethod) {
      case 'append':
        targetElement.appendChild(overlay);
        break;
      case 'prepend':
        targetElement.insertBefore(overlay, targetElement.firstChild);
        break;
      case 'before':
        targetElement.parentNode?.insertBefore(overlay, targetElement);
        break;
      case 'after':
        targetElement.parentNode?.insertBefore(overlay, targetElement.nextSibling);
        break;
    }
  }

  private showUpdateNotification(message: string, type: 'success' | 'error' = 'success'): void {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
    const notification = document.createElement('div');
    notification.className = `animestars-notification animestars-notification--${type}`;
    notification.textContent = message;
    
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'success' ? '#4CAF50' : '#f44336'};
      color: white;
      padding: 12px 16px;
      border-radius: 4px;
      z-index: 10000;
      font-family: system-ui, -apple-system, sans-serif;
      font-size: 14px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      max-width: 300px;
    `;

    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 5000);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const cardStatsOverlay = new CardStatsOverlay();

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => cardStatsOverlay.init());
} else {
  cardStatsOverlay.init();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
(window as any).cardStatsOverlay = cardStatsOverlay;
