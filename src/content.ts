import { GitHubService } from './github';
import { CardElement, CardSelector } from './types';
import './content.css';

class CardStatsOverlay {
  private githubService: GitHubService;
  private isInitialized = false;
  
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  private intersectionObserver: IntersectionObserver | null = null;
  private retryAttempts = 0;
  private maxRetryAttempts = 3;
  private retryDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

  // –ó–∞—â–∏—Ç–∞ –æ—Ç —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
  private readonly MAX_TOTAL_OVERLAYS = 200; // –ú–∞–∫—Å–∏–º—É–º –æ–≤–µ—Ä–ª–µ–µ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  private readonly CLEANUP_INTERVAL = 30000; // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  private cleanupTimer: number | null = null;
  private currentOverlaysCount = 0;

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
  private cardIdCache: Map<string, number> = new Map(); // URL -> cardId
  private statsCache: Map<number, any> = new Map(); // cardId -> stats

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  private lastProcessTime: number = 0;
  private readonly PROCESS_DEBOUNCE_DELAY = 500; // –£–≤–µ–ª–∏—á–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ debouncing

  // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç –Ω–∞ —Å–∞–π—Ç–µ
  private cardSelectors: CardSelector[] = [
    {
      selector: '.anime-cards__item-wrapper',
      dataIdAttribute: 'data-id',
      dataNameAttribute: 'data-name',
      insertionMethod: 'append',
      targetSelector: '.anime-cards__item-wrapper'
    },
    {
      selector: '.trade__inventory-item img[src*="/uploads/cards_image/"]', // –¢–æ–ª—å–∫–æ –ø–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤
      dataIdAttribute: 'src',
      insertionMethod: 'append',
      targetSelector: '.trade__inventory-item', // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
      extractFromImage: true // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î
    },
    {
      selector: '.trade__main-item',
      dataIdAttribute: 'href',
      insertionMethod: 'append'
    },
    {
      selector: '.trade__item img[src*="/uploads/cards_image/"]', // –¢–æ–ª—å–∫–æ –ø–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤
      dataIdAttribute: 'src',
      insertionMethod: 'append',
      targetSelector: '.trade__item', // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
      extractFromImage: true
    },
    {
      selector: '.inventory-card', // –î–ª—è –∫–∞—Ä—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (–Ω–µ —Ç—Ä–µ–π–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
      dataIdAttribute: 'data-card-id',
      insertionMethod: 'append'
    },
    {
      selector: '.history__body-item',
      dataIdAttribute: 'href',
      insertionMethod: 'append'
    },
    {
      selector: '.lootbox__card', // –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –ª—É—Ç–±–æ–∫—Å–æ–≤ (—Å –ª—é–±—ã–º–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏)
      dataIdAttribute: 'data-id',
      insertionMethod: 'append',
      extractFromImage: true // Lootbox cards need image URL lookup
    },
    {
      selector: '.owl-item a[href*="/cards/users/?id="]', // –ö–∞—Ä—Ç–æ—á–∫–∏ –≤ owl-carousel
      dataIdAttribute: 'href',
      insertionMethod: 'append'
    },
    {
      selector: '.trade__inventory-item img[src*="/uploads/cards_image/"]', // –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      dataIdAttribute: 'src',
      insertionMethod: 'append',
      extractFromImage: true,
      targetSelector: '.trade__inventory-item' // –í—Å—Ç–∞–≤–ª—è–µ–º overlay –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
    }
  ];

  constructor() {
    this.githubService = new GitHubService();
    this.startCleanupTimer();
  }

  async init(): Promise<void> {
    if (this.isInitialized) return;

    try {
      await this.initWithRetry();
    } catch (error) {
      console.error('‚ùå Failed to initialize extension after retries:', error);
      // –ü—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => this.init(), 5000);
    }
  }

  private async initWithRetry(): Promise<void> {
    for (let attempt = 1; attempt <= this.maxRetryAttempts; attempt++) {
      try {
        console.log(`üöÄ Initializing AnimestarsCards Stats Extension... (attempt ${attempt}/${this.maxRetryAttempts})`);
        
        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (document.readyState !== 'complete') {
          await new Promise(resolve => {
            if (document.readyState === 'complete') {
              resolve(void 0);
            } else {
              window.addEventListener('load', resolve, { once: true });
            }
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å background script —Å –ø–æ–ø—ã—Ç–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        let pingResponse;
        try {
          // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ–π ping
          pingResponse = await chrome.runtime.sendMessage({ type: 'ping' });
        } catch (error) {
          console.log('üîÑ Background script inactive, attempting to wake up...');
          
          // –î–∞–µ–º –≤—Ä–µ–º—è service worker –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è
          await new Promise(resolve => setTimeout(resolve, 100));
          
          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
          try {
            pingResponse = await chrome.runtime.sendMessage({ type: 'ping' });
          } catch (secondError) {
            console.log('üîÑ Second attempt to wake background script...');
            
            // –ï—â–µ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —Å –±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 500));
            pingResponse = await chrome.runtime.sendMessage({ type: 'ping' });
          }
        }
        
        if (!pingResponse?.success) {
          throw new Error('Background script not ready');
        }
        
        console.log('‚úÖ Using background database service');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ —á–µ—Ä–µ–∑ background
        const cardsResponse = await chrome.runtime.sendMessage({ type: 'getCardsCount' });
        const cardsCount = cardsResponse.success ? cardsResponse.data : 0;
        
        if (cardsCount === 0) {
          console.log('üì• No data yet, background is loading. Extension will work when data is ready.');
        } else {
          console.log(`üìä Database ready with ${cardsCount} cards`);
        }

        this.isInitialized = true;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageType = this.getPageType();
        console.log(`‚úÖ Extension initialized successfully on ${pageType} page`);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
        this.initLazyLoading();

        // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç background
        this.setupMessageListener();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
        this.startDOMObserver();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.setupNavigationTriggers();
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç—ã
      this.processExistingCardsDebounced();

      return; // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      
    } catch (error) {
      console.error(`‚ùå Error on attempt ${attempt}:`, error);
      
      if (attempt < this.maxRetryAttempts) {
        console.log(`‚è≥ Retrying in ${this.retryDelay}ms...`);
        await new Promise(resolve => setTimeout(resolve, this.retryDelay));
        this.retryDelay *= 2; // Exponential backoff
      } else {
        throw error;
      }
    }
  }
}

  private initLazyLoading(): void {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IntersectionObserver –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    this.intersectionObserver = new IntersectionObserver(
      (entries) => {
        const visibleCards = entries
          .filter(entry => entry.isIntersecting)
          .map(entry => entry.target as HTMLElement);
        
        if (visibleCards.length > 0) {
          this.processVisibleCards(visibleCards);
        }
      },
      {
        root: null,
        rootMargin: '50px', // –ó–∞–≥—Ä—É–∂–∞–µ–º —á—É—Ç—å —Ä–∞–Ω—å—à–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        threshold: 0.1
      }
    );
  }

  private async processVisibleCards(cards: HTMLElement[]): Promise<void> {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∫–∞—Ä—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    await Promise.all(
      cards.map(async (cardElement) => {
        // –ù–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        const matchingSelector = this.cardSelectors.find(selector => 
          cardElement.matches(selector.selector)
        );
        
        if (matchingSelector) {
          const cardId = await this.extractCardIdAsync(cardElement, matchingSelector);
          const cardName = this.extractCardName(cardElement, matchingSelector);
          
          if (cardId && !cardElement.querySelector('.card-stats-overlay')) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            this.addStatsOverlay({
              element: cardElement,
              cardId,
              cardName
            }).catch(error => {
              console.error('Error processing card:', cardId, error);
            });
          }
        }
      })
    );
  }

  private processExistingCardsDebounced(): void {
    const now = Date.now();
    if (now - this.lastProcessTime < this.PROCESS_DEBOUNCE_DELAY) {
      return; // –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã
    }
    this.lastProcessTime = now;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º debouncing –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    setTimeout(() => {
      this.processExistingCards();
    }, this.PROCESS_DEBOUNCE_DELAY);
  }

  private setupMessageListener(): void {
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
      if (message.type === 'databaseUpdated') {
        console.log(`üîÑ Database updated: ${message.data.cardsCount} cards`);
        
        // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.clearAllProcessedFlags();
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        setTimeout(() => {
          this.processExistingCardsDebounced();
        }, 500); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
      }
    });
  }

  private setupNavigationTriggers(): void {
    console.log(`üéØ Checking URL for navigation triggers: ${window.location.pathname}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ trade —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ lootbox —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const isTradePageUrl = window.location.pathname.includes('/trade/');
    const isLootboxPageUrl = window.location.pathname.includes('/pack/');
    
    if (!isTradePageUrl && !isLootboxPageUrl) {
      console.log('‚ùå Not a trade or lootbox page, skipping navigation triggers');
      return;
    }

    if (isTradePageUrl) {
      console.log('üéØ Setting up navigation triggers for trade page');

      // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è trade page
      const triggerSelectors = [
        '.tabs__want__card',        // –ö–Ω–æ–ø–∫–∞ "–•–æ—á–µ—Ç"
        '.tabs__donthave__card',    // –ö–Ω–æ–ø–∫–∞ "–ù–µ –≤–ª–∞–¥–µ–µ—Ç"  
        '.tabs__hide__lock',        // –ö–Ω–æ–ø–∫–∞ –∑–∞–º–∫–∞
        '#prev_trade_page',         // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        '#next_trade_page',         // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        '#info_trade_page',         // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        '.card-trade-list__pagination-item'  // –õ—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
      triggerSelectors.forEach(selector => {
        console.log(`üéØ Adding trigger for: ${selector}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–µ–π—á–∞—Å
        const existingElements = document.querySelectorAll(selector);
        console.log(`üîç Found ${existingElements.length} existing elements for ${selector}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º event delegation –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (event) => {
          const target = event.target as Element;
          console.log(`üñ±Ô∏è Click detected on element: ${target.tagName}.${target.className}`);
          
          if (target.matches(selector) || target.closest(selector)) {
            console.log(`üéØ Navigation trigger activated: ${selector}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            setTimeout(() => {
              this.handleNavigationTrigger();
            }, 500);
          }
        });
      });

      console.log(`‚úÖ Navigation triggers set up for ${triggerSelectors.length} selectors`);
    }
    
    if (isLootboxPageUrl) {
      console.log('üé∞ Setting up lootbox card click triggers');
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–∞–º –≤ –ª—É—Ç–±–æ–∫—Å–∞—Ö
      document.addEventListener('click', (event) => {
        const target = event.target as Element;
        const lootboxCard = target.closest('.lootbox__card');
        
        if (lootboxCard) {
          console.log('üé∞ Lootbox card clicked, clearing processed flags');
          
          // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç –ª—É—Ç–±–æ–∫—Å–∞ –¥–ª—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏
          setTimeout(() => {
            const allLootboxCards = document.querySelectorAll('.lootbox__card[data-animestars-processed]');
            allLootboxCards.forEach(card => {
              card.removeAttribute('data-animestars-processed');
            });
            
            // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ debouncing
            this.processExistingCardsDebounced();
          }, 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç
        }
      });
      
      console.log('‚úÖ Lootbox triggers set up');
    }
  }

  private handleNavigationTrigger(): void {
    console.log('üîÑ Navigation trigger: clearing state and regenerating stats');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('üßπ Clearing all processed flags...');
    this.clearAllProcessedFlags();
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ overlay —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üóëÔ∏è Removing all stats overlays...');
    this.removeAllStatsOverlays();
    
    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('üîÑ Clearing processing queues...');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ debouncing
    console.log('‚ö° Triggering card processing...');
    setTimeout(() => {
      this.processExistingCardsDebounced();
    }, 100);
  }

  private removeAllStatsOverlays(): void {
    const overlays = document.querySelectorAll('.card-stats-overlay');
    overlays.forEach(overlay => {
      overlay.remove();
    });
    console.log(`üóëÔ∏è Removed ${overlays.length} existing stats overlays`);
  }

  private async checkAndUpdateDatabase(): Promise<void> {
    // Content script –±–æ–ª—å—à–µ –ù–ï –∂–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!
    // –û–Ω –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–º —á—Ç–æ –µ—Å—Ç—å, –∞ background –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    console.log('üîç Content script no longer waits for database, background handles it');
  }

  private startDOMObserver(): void {
    const observer = new MutationObserver((mutations) => {
      let shouldProcess = false;
      let isTradePageUpdate = false;
      let hasCardChanges = false;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ù–ï –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
      const isCardsCatalog = window.location.pathname === '/cards/' || 
                            window.location.pathname.startsWith('/cards/?');

      mutations.forEach((mutation) => {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
          Array.from(mutation.addedNodes).forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const element = node as Element;
              
              // –ö–†–ò–¢–ò–ß–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
              if (element.classList.contains('card-stats-overlay') || 
                  element.closest('.card-stats-overlay') ||
                  element.querySelector('.card-stats-overlay') ||
                  element.classList.contains('card-stats') ||
                  element.closest('.card-stats')) {
                return; // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
              }
              
              // –ù–∞ –∫–∞—Ç–∞–ª–æ–≥–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ù–ï —Å—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è trade updates
              if (isCardsCatalog) {
                // –ù–∞ –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–æ –Ω–µ –∫–∞–∫ trade update
                if (this.isCardElement(element)) {
                  shouldProcess = true;
                  hasCardChanges = true;
                }
              } else {
                // –ù–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö (—Ä–µ–∞–ª—å–Ω—ã—Ö trade) - –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞
                if (this.isTradePageContainer(element)) {
                  isTradePageUpdate = true;
                  shouldProcess = true;
                  hasCardChanges = true;
                } else if (this.isCardElement(element)) {
                  shouldProcess = true;
                  hasCardChanges = true;
                }
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
              if (this.hasCardsInside(element)) {
                shouldProcess = true;
                hasCardChanges = true;
                // –¢–æ–ª—å–∫–æ –Ω–∞ –ù–ï-–∫–∞—Ç–∞–ª–æ–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ trade update
                if (!isCardsCatalog && this.isTradeRelatedElement(element, null)) {
                  isTradePageUpdate = true;
                }
              }
            }
          });
        }
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–ª–∞–≥–æ–≤
        if (mutation.type === 'childList' && mutation.removedNodes.length > 0) {
          Array.from(mutation.removedNodes).forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const element = node as Element;
              if (this.isCardElement(element) || this.hasCardsInside(element)) {
                // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ —É —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                this.clearProcessedFlags(element);
              }
            }
          });
        }
        
        // –¢–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (mutation.type === 'attributes' && mutation.target) {
          const element = mutation.target as Element;
          if (this.isTradeRelatedElement(element, mutation.attributeName)) {
            isTradePageUpdate = true;
            shouldProcess = true;
            hasCardChanges = true;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (element.hasAttribute('data-animestars-processed')) {
              element.removeAttribute('data-animestars-processed');
            }
          }
        }
      });

      if (shouldProcess) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const delay = isTradePageUpdate ? 800 : 300; // –£–≤–µ–ª–∏—á–µ–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤
        
        if (hasCardChanges) {
          console.log(`üîÑ DOM changes detected, processing in ${delay}ms...`);
          if (isTradePageUpdate) {
            console.log('üîÑ Trade page update detected, clearing processed flags...');
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Ç—Ä–µ–π–¥-—Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –¥–ª—è –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.clearAllProcessedFlags();
          }
        } 
        setTimeout(() => this.processExistingCardsDebounced(), delay);
      }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ observer —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    const observerConfig = {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['class', 'data-loaded', 'data-updated', 'style', 'data-pack-id', 'data-id'] // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    };

    observer.observe(document.body, observerConfig);
    console.log('üëÄ DOM observer started with lootbox and trade page support');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ª—É—Ç–±–æ–∫—Å–æ–≤
    if (window.location.pathname.includes('/pack/')) {
      setInterval(() => {
        const lootboxCards = document.querySelectorAll('.lootbox__card[data-id]');
        if (lootboxCards.length > 0) {
          console.log(`üé∞ Periodic lootbox check: found ${lootboxCards.length} cards`);
          this.processExistingCardsDebounced();
        }
      }, 2000);
    }
  }

  private hasCardsInside(element: Element): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    return this.cardSelectors.some(selector => 
      element.querySelector(selector.selector)
    );
  }

  private clearProcessedFlags(container: Element): void {
    const processedElements = container.querySelectorAll('[data-animestars-processed]');
    processedElements.forEach(el => {
      el.removeAttribute('data-animestars-processed');
    });
    console.log(`üßπ Cleared ${processedElements.length} processed flags in container`);
  }

  private clearAllProcessedFlags(): void {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏
    const allProcessedElements = document.querySelectorAll('[data-animestars-processed]');
    allProcessedElements.forEach(el => {
      el.removeAttribute('data-animestars-processed');
    });
    console.log(`üßπ Cleared ${allProcessedElements.length} processed flags for reprocessing`);
  }

  private isTradePageContainer(element: Element): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL - –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ trade —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Ç–æ —ç—Ç–æ –Ω–µ trade container
    if (!window.location.pathname.includes('/trade/')) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –¥–ª—è —Ç—Ä–µ–π–¥-–∫–∞—Ä—Ç (–¢–û–õ–¨–ö–û –¥–ª—è trade pages)
    const tradeContainerSelectors = [
      '.trade__inventory',
      '.trade__main', 
      '.trade__offers',
      '.trade__cards-list',
      '.trade-section',
      '[class*="trade-inventory"]',
      '[id*="trade"]'
    ];

    return tradeContainerSelectors.some(selector => 
      element.matches(selector) || element.querySelector(selector)
    );
  }

  private isCardElement(element: Element): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–º –∫–∞—Ä—Ç—ã
    let current: Element | null = element;
    let depth = 0;
    const maxDepth = 5; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞

    while (current && depth < maxDepth) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º –∫–∞—Ä—Ç
      for (const selector of this.cardSelectors) {
        if (current.matches && current.matches(selector.selector)) {
          return true;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–∞—Ä—Ç
      if (current) {
        const cardAttributes = ['data-id', 'data-card-id', 'data-pack-id', 'data-rank'];
        if (cardAttributes.some(attr => current!.hasAttribute(attr))) {
          return true;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã —ç–ª–µ–º–µ–Ω—Ç–∞
      if (current && current.className && typeof current.className === 'string') {
        const cardClasses = ['card', 'trade-card', 'inventory-card', 'pack-card', 'owl-item'];
        if (cardClasses.some(cls => current!.className.includes(cls))) {
          return true;
        }
      }

      current = current.parentElement;
      depth++;
    }

    return false;
  }

  private isTradeRelatedElement(element: Element, attributeName: string | null): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∫–∞—Ä—Ç
    if (!attributeName) return false;

    // –í–ê–ñ–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    if (element.classList.contains('card-stats-overlay') || 
        element.closest('.card-stats-overlay') ||
        element.querySelector('.card-stats-overlay')) {
      return false; // –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }

    const cardRelatedAttributes = ['data-loaded', 'data-updated', 'src', 'data-id', 'data-rank'];

    // –¢–û–õ–¨–ö–û –¥–ª—è –†–ï–ê–õ–¨–ù–´–• trade —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–µ –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ä—Ç–æ—á–µ–∫!)
    const isActualTradePage = window.location.pathname.match(/\/cards\/\d+\/trade\//) || 
                             window.location.pathname === '/trade/';
    
    if (!isActualTradePage) {
      return false; // –ù–µ trade —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ trade update
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç—Ä–µ–π–¥-—Å—Ç—Ä–∞–Ω–∏—Ü
    const tradeSpecificAttributes = ['data-id', 'data-rank', 'src', 'href', 'data-card-id'];
    if (tradeSpecificAttributes.includes(attributeName)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–ª–∏ trade –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      return this.isCardElement(element) || this.isTradePageContainer(element);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    if (cardRelatedAttributes.includes(attributeName)) {
      return this.isCardElement(element);
    }

    return false;
  }

  private getPageType(): string {
    const path = window.location.pathname;
    
    if (path.includes('/trade/')) {
      return 'trade';
    } else if (path.includes('/cards/')) {
      return 'cards catalog';
    } else if (path.includes('/history/')) {
      return 'history';
    } else if (path.includes('/inventory/')) {
      return 'inventory';
    } else {
      return 'general';
    }
  }

  private async processExistingCards(): Promise<void> {
    if (!this.isInitialized || !this.intersectionObserver) return;

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ observer –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    for (const selector of this.cardSelectors) {
      const elements = document.querySelectorAll(selector.selector);
      
      elements.forEach(element => {
        const htmlElement = element as HTMLElement;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ observer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (!htmlElement.hasAttribute('data-animestars-observing') && 
            !htmlElement.querySelector('.card-stats-overlay')) {
          
          htmlElement.setAttribute('data-animestars-observing', 'true');
          this.intersectionObserver!.observe(htmlElement);
        }
      });
    }
  }

  private getCardDataFromElement(element: HTMLElement): CardElement | null {
    for (const selector of this.cardSelectors) {
      if (element.matches(selector.selector)) {
        const cardId = this.extractCardId(element, selector);
        const cardName = this.extractCardName(element, selector);
        
        if (cardId && !element.querySelector('.card-stats-overlay')) {
          return {
            element,
            cardId,
            cardName
          };
        }
        break;
      }
    }
    return null;
  }

  private debounce<T extends (...args: any[]) => any>(
    func: T,
    wait: number
  ): (...args: Parameters<T>) => void {
    let timeout: NodeJS.Timeout;
    return (...args: Parameters<T>) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  private async extractCardIdAsync(element: HTMLElement, selector: CardSelector): Promise<number | null> {
    const attr = selector.dataIdAttribute;
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (selector.extractFromImage && attr === 'src') {
      const img = element.tagName === 'IMG' ? element : element.querySelector('img');
      if (img) {
        const src = img.getAttribute('src');
        if (src) {
          // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–∞—Ä—Ç—É –ø–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const cardId = await this.findCardIdByImageUrlAsync(src);
          if (cardId) {
            return cardId;
          } else {
            console.log(`‚ùå No card found for image: ${src}`);
          }
          
          // Fallback: –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL —Å –ø–æ–º–æ—â—å—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
          let extractedId: number | null = null;
          
          // –ü–∞—Ç—Ç–µ—Ä–Ω 1: /uploads/cards_image/12345/rank/filename.webp
          let match = src.match(/\/uploads\/cards_image\/(\d+)\//);
          if (match) {
            extractedId = parseInt(match[1], 10);
          } else {
            // –ü–∞—Ç—Ç–µ—Ä–Ω 2: /cards_image/12345/
            match = src.match(/\/cards_image\/(\d+)\//);
            if (match) {
              extractedId = parseInt(match[1], 10);
            } else {
              // –ü–∞—Ç—Ç–µ—Ä–Ω 3: –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ID
              match = src.match(/\/(\d+)-[^\/]*\.(webp|jpg|png)$/);
              if (match) {
                extractedId = parseInt(match[1], 10);
              }
            }
          }
          
          if (extractedId) {
            // Fallback extraction —É—Å–ø–µ—à–µ–Ω
          } else {
            console.warn(`‚ùå Failed to extract card ID from URL: ${src}`);
          }
          return extractedId;
        }
      }
      return null;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return this.extractCardId(element, selector);
  }

  private extractCardId(element: HTMLElement, selector: CardSelector): number | null {
    const attr = selector.dataIdAttribute;
    
    // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    if (selector.extractFromImage && attr === 'src') {
      // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      return null;
    }
    
    if (attr === 'href') {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ href —Ç–∏–ø–∞ "/cards/users/?id=12345"
      const href = element.getAttribute('href');
      if (href) {
        const match = href.match(/id=(\d+)/);
        return match ? parseInt(match[1], 10) : null;
      }
    } else {
      // –î–ª—è anime-cards__item-wrapper –∏—â–µ–º data-id –≤ –¥–æ—á–µ—Ä–Ω–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ
      let targetElement = element;
      if (element.classList.contains('anime-cards__item-wrapper')) {
        const cardItem = element.querySelector('.anime-cards__item');
        if (cardItem) {
          targetElement = cardItem as HTMLElement;
        }
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
      const value = targetElement.getAttribute(attr);
      return value ? parseInt(value, 10) : null;
    }
    
    return null;
  }

  private findCardIdByImageUrl(imageUrl: string): number | null {
    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –≤–æ–∑–º–æ–∂–µ–Ω, –≤–µ—Ä–Ω–µ–º null –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    return null;
  }

  private async findCardIdByImageUrlAsync(imageUrl: string): Promise<number | null> {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL - —É–±–∏—Ä–∞–µ–º –¥–æ–º–µ–Ω –∏ –≤–µ–¥—É—â–∏–π —Å–ª–µ—à
      const normalizedUrl = imageUrl.replace(/^https?:\/\/[^\/]+/, '').replace(/^\/+/, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (this.cardIdCache.has(normalizedUrl)) {
        return this.cardIdCache.get(normalizedUrl)!;
      }
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —á–µ—Ä–µ–∑ background script
      const response = await chrome.runtime.sendMessage({
        type: 'findCardByImage',
        data: { imageUrl: normalizedUrl }
      });
      
      if (response.success && response.cardId) {
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.cardIdCache.set(normalizedUrl, response.cardId);
        return response.cardId;
      }
      
      // –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      return null;
    } catch (error) {
      console.error('Error finding card by image:', error);
      return null;
    }
  }

  private extractCardName(element: HTMLElement, selector: CardSelector): string | undefined {
    if (selector.dataNameAttribute) {
      // –î–ª—è anime-cards__item-wrapper –∏—â–µ–º data-name –≤ –¥–æ—á–µ—Ä–Ω–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ
      let targetElement = element;
      if (element.classList.contains('anime-cards__item-wrapper')) {
        const cardItem = element.querySelector('.anime-cards__item');
        if (cardItem) {
          targetElement = cardItem as HTMLElement;
        }
      }
      
      return targetElement.getAttribute(selector.dataNameAttribute) || undefined;
    }
    return undefined;
  }

  private async addStatsOverlay(card: CardElement): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
      if (this.currentOverlaysCount >= this.MAX_TOTAL_OVERLAYS) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –≤ DOM
      if (!document.contains(card.element)) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
      if (card.element.querySelector('.card-stats-overlay') || 
          card.element.hasAttribute('data-animestars-processed')) {
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      card.element.setAttribute('data-animestars-processed', 'true');

      let stats;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      if (this.statsCache.has(card.cardId)) {
        stats = this.statsCache.get(card.cardId);
      } else {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ background script
        const response = await chrome.runtime.sendMessage({
          type: 'getCardStats',
          data: { cardId: card.cardId }
        });
        
        if (!response.success || !response.data) {
          return;
        }
        
        stats = response.data;
        // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.statsCache.set(card.cardId, stats);
      }

      const overlay = this.createStatsOverlay(stats, card.cardId, card.element, card.cardName);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      const matchingSelector = this.cardSelectors.find(selector => 
        card.element.matches(selector.selector)
      );

      if (matchingSelector) {
        this.insertOverlay(card.element, overlay, matchingSelector);
        this.currentOverlaysCount++;
      }

    } catch (error) {
      console.error(`‚ùå Error adding overlay for card ${card.cardId}:`, error);
    }
  }

  private createStatsOverlay(stats: { users: number; need: number; trade: number }, cardId: number, cardElement: HTMLElement, cardName?: string): HTMLElement {
    const overlay = document.createElement('div');
    overlay.className = 'card-stats-overlay';
    
    const statsContainer = document.createElement('div');
    statsContainer.className = 'card-stats';
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const usersSpan = document.createElement('span');
    usersSpan.innerHTML = `<i class="fas fa-users"></i> ${stats.users || 0}`;
    usersSpan.title = '–í–ª–∞–¥–µ–ª—å—Ü–µ–≤';
    usersSpan.setAttribute('data-card-id', cardId.toString());
    usersSpan.style.cursor = 'pointer';
    usersSpan.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      window.open(`https://animestars.org/cards/users/?id=${cardId}`, '_blank');
    });
    
    const needSpan = document.createElement('span');
    needSpan.innerHTML = `<i class="fas fa-heart"></i> ${stats.need || 0}`;
    needSpan.title = '–•–æ—Ç—è—Ç –ø–æ–ª—É—á–∏—Ç—å';
    needSpan.setAttribute('data-card-id', cardId.toString());
    needSpan.style.cursor = 'pointer';
    needSpan.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      window.open(`https://animestars.org/cards/users/need/?id=${cardId}`, '_blank');
    });
    
    const tradeSpan = document.createElement('span');
    tradeSpan.innerHTML = `<i class="fas fa-sync-alt"></i> ${stats.trade || 0}`;
    tradeSpan.title = '–ì–æ—Ç–æ–≤—ã –æ–±–º–µ–Ω—è—Ç—å';
    tradeSpan.setAttribute('data-card-id', cardId.toString());
    tradeSpan.style.cursor = 'pointer';
    tradeSpan.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      window.open(`https://animestars.org/cards/users/trade/?id=${cardId}`, '_blank');
    });
    
    statsContainer.appendChild(usersSpan);
    statsContainer.appendChild(needSpan);
    statsContainer.appendChild(tradeSpan);
    overlay.appendChild(statsContainer);

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
    const parentCard = cardElement.closest('.lootbox__card, .owl-item, .trade__inventory-item');
    const isLootboxCard = parentCard?.classList.contains('lootbox__card');
    const isOwlCard = parentCard?.closest('.owl-carousel');
    
    if (isLootboxCard) {
      // –î–ª—è –ª—É—Ç–±–æ–∫—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º mixed layout
      statsContainer.setAttribute('data-layout', 'mixed');
    } else if (isOwlCard) {
      // –î–ª—è owl-carousel –∏—Å–ø–æ–ª—å–∑—É–µ–º mixed layout
      statsContainer.setAttribute('data-layout', 'mixed');
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - horizontal
      statsContainer.setAttribute('data-layout', 'horizontal');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω—ã–π –ª–µ–π–∞—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    this.setLayoutForStats(overlay);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞
    this.addClickHandlers(overlay, cardId);

    return overlay;
  }

  private setLayoutForStats(overlay: HTMLElement): void {
    const statsContainer = overlay.querySelector('.card-stats') as HTMLElement;
    if (!statsContainer) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const parentCard = overlay.closest('.lootbox__card, .owl-item, .trade__inventory-item');
    const isLootboxCard = parentCard?.classList.contains('lootbox__card');
    const isOwlCard = parentCard?.closest('.owl-carousel');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è layout –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∏—Ä–∏–Ω—ã –∏ —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    const updateLayout = (width: number) => {
      let layout = 'horizontal';
      
      // –î–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ª—É—Ç–±–æ–∫—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
      if (isLootboxCard) {
        if (width < 120) {
          layout = 'vertical';
        } else {
          // –î–ª—è –ª—É—Ç–±–æ–∫—Å–æ–≤ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mixed layout
          layout = 'mixed';
        }
      } else if (isOwlCard) {
        // –î–ª—è owl-carousel –∫–∞—Ä—Ç–æ—á–µ–∫
        if (width < 140) {
          layout = 'vertical';
        } else if (width < 190) {
          layout = 'mixed';
        }
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        if (width < 120) {
          layout = 'vertical';
        } else if (width < 180) {
          layout = 'mixed';
        }
      }
      
      statsContainer.setAttribute('data-layout', layout);
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–µ–π–∞—É—Ç–∞, –Ω–µ –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (statsContainer.getAttribute('data-prev-layout') !== layout) {
        console.log(`üìè Layout changed to '${layout}' for width ${width}px (${isLootboxCard ? 'lootbox' : isOwlCard ? 'owl' : 'regular'} card)`);
        statsContainer.setAttribute('data-prev-layout', layout);
      }
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ResizeObserver –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–µ–π–∞—É—Ç–∞
    const resizeObserver = new ResizeObserver(entries => {
      for (const entry of entries) {
        const width = entry.contentRect.width;
        updateLayout(width);
      }
    });
    
    resizeObserver.observe(overlay);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ª–µ–π–∞—É—Ç —Å—Ä–∞–∑—É –∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    const setInitialLayout = () => {
      const width = overlay.offsetWidth;
      if (width > 0) {
        updateLayout(width);
      } else {
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(setInitialLayout, 50);
      }
    };
    
    // –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å layout –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    setInitialLayout();
  }

  private addClickHandlers(overlay: HTMLElement, cardId: number): void {
    const statItems = overlay.querySelectorAll('.card-stat-item');
    
    statItems.forEach((item) => {
      const element = item as HTMLElement;
      const type = element.getAttribute('data-type');
      
      element.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        
        let url = '';
        switch(type) {
          case 'users':
            url = `/cards/users/?id=${cardId}`;
            break;
          case 'need':
            url = `/cards/users/need/?id=${cardId}`;
            break;
          case 'trade':
            url = `/cards/users/trade/?id=${cardId}`;
            break;
          default:
            return;
        }
        
        console.log(`üîó Navigating to: ${url}`);
        window.open(url, '_blank');
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
      element.style.cursor = 'pointer';
    });
  }

  private insertOverlay(cardElement: HTMLElement, overlay: HTMLElement, selector: CardSelector): void {
    let targetElement: HTMLElement;
    
    if (selector.targetSelector) {
      // –ï—Å–ª–∏ targetSelector —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –µ–≥–æ –≤ DOM –æ—Ç cardElement –≤–≤–µ—Ä—Ö
      targetElement = cardElement.closest(selector.targetSelector) as HTMLElement;
      if (!targetElement) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ closest, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ querySelector
        targetElement = cardElement.querySelector(selector.targetSelector) as HTMLElement || cardElement;
      }
    } else {
      targetElement = cardElement;
    }

    switch (selector.insertionMethod) {
      case 'append':
        targetElement.appendChild(overlay);
        break;
      case 'prepend':
        targetElement.insertBefore(overlay, targetElement.firstChild);
        break;
      case 'before':
        targetElement.parentNode?.insertBefore(overlay, targetElement);
        break;
      case 'after':
        targetElement.parentNode?.insertBefore(overlay, targetElement.nextSibling);
        break;
    }
  }

  private showUpdateNotification(message: string, type: 'success' | 'error' = 'success'): void {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
    const notification = document.createElement('div');
    notification.className = `animestars-notification animestars-notification--${type}`;
    notification.textContent = message;
    
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'success' ? '#4CAF50' : '#f44336'};
      color: white;
      padding: 12px 16px;
      border-radius: 4px;
      z-index: 10000;
      font-family: system-ui, -apple-system, sans-serif;
      font-size: 14px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      max-width: 300px;
    `;

    document.body.appendChild(notification);

    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 5000);
  }

  private startCleanupTimer(): void {
    this.cleanupTimer = window.setInterval(() => {
      this.performCleanup();
    }, this.CLEANUP_INTERVAL);
  }

  private performCleanup(): void {
    console.log('üßπ Performing memory cleanup...');
    
    // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ–≤–µ—Ä–ª–µ–∏
    const overlays = document.querySelectorAll('.card-stats-overlay');
    let removed = 0;
    
    overlays.forEach(overlay => {
      const parent = overlay.parentElement;
      
      // –£–¥–∞–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–∏ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ
      if (!parent || !document.body.contains(parent)) {
        overlay.remove();
        removed++;
        this.currentOverlaysCount--;
      }
    });
    
    // –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ—á–µ—Ä–µ–¥–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç)
    if (removed > 0) {
      console.log(`üßπ Cleanup completed: ${removed} overlays removed`);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≤–µ—Ä–ª–µ–µ–≤
    if (this.currentOverlaysCount > this.MAX_TOTAL_OVERLAYS) {
      const excessOverlays = document.querySelectorAll('.card-stats-overlay');
      const toRemove = this.currentOverlaysCount - this.MAX_TOTAL_OVERLAYS;
      
      for (let i = 0; i < toRemove && i < excessOverlays.length; i++) {
        excessOverlays[i].remove();
        this.currentOverlaysCount--;
      }
      
      console.log(`üßπ Removed ${toRemove} excess overlays to stay within limit`);
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const cardStatsOverlay = new CardStatsOverlay();

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => cardStatsOverlay.init());
} else {
  cardStatsOverlay.init();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
(window as any).cardStatsOverlay = cardStatsOverlay;
