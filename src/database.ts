import { CardData, DatabaseInfo } from './types';

export class DatabaseService {
  private static readonly DB_NAME = 'AnimestarsCardsDB';
  private static readonly DB_VERSION = 1;
  private static readonly CARDS_STORE = 'cards';
  private static readonly INFO_STORE = 'info';

  private db: IDBDatabase | null = null;

  async init(): Promise<void> {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(DatabaseService.DB_NAME, DatabaseService.DB_VERSION);

      request.onerror = () => reject(request.error);
      request.onsuccess = () => {
        this.db = request.result;
        resolve();
      };

      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result;

        // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞—Ä—Ç
        if (!db.objectStoreNames.contains(DatabaseService.CARDS_STORE)) {
          const cardsStore = db.createObjectStore(DatabaseService.CARDS_STORE, { keyPath: 'cardId' });
          cardsStore.createIndex('cardName', 'cardName', { unique: false });
          cardsStore.createIndex('animeId', 'animeId', { unique: false });
        }

        // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ
        if (!db.objectStoreNames.contains(DatabaseService.INFO_STORE)) {
          db.createObjectStore(DatabaseService.INFO_STORE, { keyPath: 'key' });
        }
      };
    });
  }

  async saveCards(cards: CardData[]): Promise<void> {
    if (!this.db) throw new Error('Database not initialized');

    console.log(`Starting to save ${cards.length} cards to IndexedDB`);

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    await this.clearCards();
    console.log('Old cards cleared from IndexedDB');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([DatabaseService.CARDS_STORE], 'readwrite');
      const store = transaction.objectStore(DatabaseService.CARDS_STORE);
      
      let completed = 0;
      let hasError = false;

      transaction.oncomplete = () => {
        if (!hasError) {
          console.log(`‚úÖ Saved ${completed}/${cards.length} cards to IndexedDB`);
          resolve();
        }
      };

      transaction.onerror = () => {
        hasError = true;
        console.error('Transaction error:', transaction.error);
        reject(transaction.error);
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      for (const card of cards) {
        const request = store.put(card); // –ò—Å–ø–æ–ª—å–∑—É–µ–º put –≤–º–µ—Å—Ç–æ add –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        
        request.onsuccess = () => {
          completed++;
          if (completed % 50 === 0) {
            console.log(`Progress: ${completed}/${cards.length} cards saved`);
          }
        };
        
        request.onerror = () => {
          hasError = true;
          console.error(`Error saving card ${card.cardId}:`, request.error);
          reject(request.error);
        };
      }
    });
  }

  async getCardStats(cardId: number): Promise<{ users: number; need: number; trade: number } | null> {
    if (!this.db) {
      console.log('üîÑ Database not initialized, auto-initializing...');
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([DatabaseService.CARDS_STORE], 'readonly');
      const store = transaction.objectStore(DatabaseService.CARDS_STORE);
      const request = store.get(cardId);

      request.onsuccess = () => {
        const card = request.result as CardData;
        if (card) {
          resolve({
            users: card.users,
            need: card.need,
            trade: card.trade
          });
        } else {
          resolve(null);
        }
      };

      request.onerror = () => reject(request.error);
    });
  }

  async clearCards(): Promise<void> {
    if (!this.db) throw new Error('Database not initialized');

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([DatabaseService.CARDS_STORE], 'readwrite');
      const store = transaction.objectStore(DatabaseService.CARDS_STORE);
      const request = store.clear();

      request.onsuccess = () => {
        console.log('IndexedDB cards store cleared');
        resolve();
      };
      request.onerror = () => {
        console.error('Error clearing cards store:', request.error);
        reject(request.error);
      };
    });
  }

  async clearAll(): Promise<void> {
    if (!this.db) throw new Error('Database not initialized');

    return new Promise((resolve, reject) => {
      // –û—á–∏—â–∞–µ–º –∏ –∫–∞—Ä—Ç—ã, –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
      const transaction = this.db!.transaction([DatabaseService.CARDS_STORE, DatabaseService.INFO_STORE], 'readwrite');
      
      const cardsStore = transaction.objectStore(DatabaseService.CARDS_STORE);
      const infoStore = transaction.objectStore(DatabaseService.INFO_STORE);
      
      let clearOperations = 0;
      let completedOperations = 0;

      transaction.oncomplete = () => {
        console.log('IndexedDB completely cleared');
        resolve();
      };

      transaction.onerror = () => {
        console.error('Error clearing IndexedDB:', transaction.error);
        reject(transaction.error);
      };

      // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—ã
      const clearCardsRequest = cardsStore.clear();
      clearOperations++;
      clearCardsRequest.onsuccess = () => {
        completedOperations++;
        console.log('Cards store cleared');
      };

      // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const clearInfoRequest = infoStore.clear();
      clearOperations++;
      clearInfoRequest.onsuccess = () => {
        completedOperations++;
        console.log('Info store cleared');
      };
    });
  }

  async saveDatabaseInfo(info: DatabaseInfo): Promise<void> {
    if (!this.db) throw new Error('Database not initialized');

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([DatabaseService.INFO_STORE], 'readwrite');
      const store = transaction.objectStore(DatabaseService.INFO_STORE);
      const request = store.put({ key: 'info', ...info });

      request.onsuccess = () => resolve();
      request.onerror = () => reject(request.error);
    });
  }

  async getDatabaseInfo(): Promise<DatabaseInfo | null> {
    if (!this.db) {
      console.log('üîÑ Database not initialized, auto-initializing...');
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([DatabaseService.INFO_STORE], 'readonly');
      const store = transaction.objectStore(DatabaseService.INFO_STORE);
      const request = store.get('info');

      request.onsuccess = () => {
        const result = request.result;
        if (result) {
          const { key, ...info } = result;
          resolve(info as DatabaseInfo);
        } else {
          resolve(null);
        }
      };

      request.onerror = () => reject(request.error);
    });
  }

  async deleteDatabase(): Promise<void> {
    console.log('üóëÔ∏è Starting database deletion process...');
    
    return new Promise((resolve, reject) => {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (this.db) {
        console.log('üì± Closing current database connection...');
        this.db.close();
        this.db = null;
      }

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å
      setTimeout(() => {
        console.log('üîÑ Attempting to delete database...');
        
        // –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const deleteRequest = indexedDB.deleteDatabase(DatabaseService.DB_NAME);
        
        deleteRequest.onsuccess = () => {
          console.log('‚úÖ Database deleted successfully');
          resolve();
        };
        
        deleteRequest.onerror = () => {
          console.error('‚ùå Error deleting database:', deleteRequest.error);
          reject(deleteRequest.error);
        };
        
        deleteRequest.onblocked = () => {
          console.warn('‚ö†Ô∏è Database deletion blocked by active connections');
          console.warn('üîÑ Attempting to wait for connections to close...');
          
          // –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
          setTimeout(() => {
            console.log('‚è∞ Timeout waiting for database deletion, proceeding anyway...');
            // –ù–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º, –∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
            resolve();
          }, 3000);
        };
        
      }, 200); // –î–∞–µ–º 200–º—Å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    });
  }

  async clearAllData(): Promise<void> {
    console.log('üßπ Clearing all data from database...');
    
    if (!this.db) {
      console.log('üì± Database not connected, initializing...');
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([DatabaseService.CARDS_STORE, DatabaseService.INFO_STORE], 'readwrite');
      
      transaction.oncomplete = () => {
        console.log('‚úÖ All data cleared successfully');
        resolve();
      };
      
      transaction.onerror = () => {
        console.error('‚ùå Error clearing data:', transaction.error);
        reject(transaction.error);
      };

      // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞—Ä—Ç
      const cardsStore = transaction.objectStore(DatabaseService.CARDS_STORE);
      cardsStore.clear();
      
      // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const infoStore = transaction.objectStore(DatabaseService.INFO_STORE);
      infoStore.clear();
    });
  }

  async getCardsCount(): Promise<number> {
    if (!this.db) {
      console.log('üîÑ Database not initialized, auto-initializing...');
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([DatabaseService.CARDS_STORE], 'readonly');
      const store = transaction.objectStore(DatabaseService.CARDS_STORE);
      const request = store.count();

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }
}
